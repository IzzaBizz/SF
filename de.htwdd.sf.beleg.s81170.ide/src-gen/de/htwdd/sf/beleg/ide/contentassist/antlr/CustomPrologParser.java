/*
 * generated by Xtext 2.12.0
 */
package de.htwdd.sf.beleg.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.htwdd.sf.beleg.ide.contentassist.antlr.internal.InternalCustomPrologParser;
import de.htwdd.sf.beleg.services.CustomPrologGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CustomPrologParser extends AbstractContentAssistParser {

	@Inject
	private CustomPrologGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalCustomPrologParser createParser() {
		InternalCustomPrologParser result = new InternalCustomPrologParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getClauseAccess().getAlternatives(), "rule__Clause__Alternatives");
					put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
					put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
					put(grammarAccess.getListAccess().getAlternatives(), "rule__List__Alternatives");
					put(grammarAccess.getNonEmptyListAccess().getAlternatives(), "rule__NonEmptyList__Alternatives");
					put(grammarAccess.getPrologdslAccess().getGroup(), "rule__Prologdsl__Group__0");
					put(grammarAccess.getExqueryAccess().getGroup(), "rule__Exquery__Group__0");
					put(grammarAccess.getQueryAccess().getGroup(), "rule__Query__Group__0");
					put(grammarAccess.getQueryAccess().getGroup_1(), "rule__Query__Group_1__0");
					put(grammarAccess.getFactAccess().getGroup(), "rule__Fact__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getPredicateAccess().getGroup(), "rule__Predicate__Group__0");
					put(grammarAccess.getPredicateAccess().getGroup_3(), "rule__Predicate__Group_3__0");
					put(grammarAccess.getListAccess().getGroup_0(), "rule__List__Group_0__0");
					put(grammarAccess.getNonEmptyListAccess().getGroup_0(), "rule__NonEmptyList__Group_0__0");
					put(grammarAccess.getNonEmptyListAccess().getGroup_1(), "rule__NonEmptyList__Group_1__0");
					put(grammarAccess.getNonEmptyListAccess().getGroup_1_1(), "rule__NonEmptyList__Group_1_1__0");
					put(grammarAccess.getFolgeAccess().getGroup(), "rule__Folge__Group__0");
					put(grammarAccess.getFolgeAccess().getGroup_1(), "rule__Folge__Group_1__0");
					put(grammarAccess.getModelAccess().getExpressionsAssignment(), "rule__Model__ExpressionsAssignment");
					put(grammarAccess.getPrologdslAccess().getProgramAssignment_0(), "rule__Prologdsl__ProgramAssignment_0");
					put(grammarAccess.getPrologdslAccess().getExqueryAssignment_1(), "rule__Prologdsl__ExqueryAssignment_1");
					put(grammarAccess.getProgramAccess().getClausesAssignment(), "rule__Program__ClausesAssignment");
					put(grammarAccess.getExqueryAccess().getQueryAssignment_1(), "rule__Exquery__QueryAssignment_1");
					put(grammarAccess.getQueryAccess().getPAssignment_0(), "rule__Query__PAssignment_0");
					put(grammarAccess.getQueryAccess().getPAssignment_1_1(), "rule__Query__PAssignment_1_1");
					put(grammarAccess.getClauseAccess().getFactAssignment_0(), "rule__Clause__FactAssignment_0");
					put(grammarAccess.getClauseAccess().getRuleAssignment_1(), "rule__Clause__RuleAssignment_1");
					put(grammarAccess.getFactAccess().getPredicateAssignment_0(), "rule__Fact__PredicateAssignment_0");
					put(grammarAccess.getRuleAccess().getRuleAssignment_0(), "rule__Rule__RuleAssignment_0");
					put(grammarAccess.getRuleAccess().getQueryAssignment_2(), "rule__Rule__QueryAssignment_2");
					put(grammarAccess.getPredicateAccess().getFunctorAssignment_0(), "rule__Predicate__FunctorAssignment_0");
					put(grammarAccess.getPredicateAccess().getTermAssignment_2(), "rule__Predicate__TermAssignment_2");
					put(grammarAccess.getPredicateAccess().getTermAssignment_3_1(), "rule__Predicate__TermAssignment_3_1");
					put(grammarAccess.getFunctorAccess().getFuncNameAssignment(), "rule__Functor__FuncNameAssignment");
					put(grammarAccess.getTermAccess().getAtomAssignment_0(), "rule__Term__AtomAssignment_0");
					put(grammarAccess.getTermAccess().getListAssignment_1(), "rule__Term__ListAssignment_1");
					put(grammarAccess.getAtomAccess().getIdentAssignment_0(), "rule__Atom__IdentAssignment_0");
					put(grammarAccess.getAtomAccess().getIdentAssignment_1(), "rule__Atom__IdentAssignment_1");
					put(grammarAccess.getAtomAccess().getIdentAssignment_2(), "rule__Atom__IdentAssignment_2");
					put(grammarAccess.getListAccess().getNonemptyAssignment_1(), "rule__List__NonemptyAssignment_1");
					put(grammarAccess.getNonEmptyListAccess().getFolgeAssignment_0_1(), "rule__NonEmptyList__FolgeAssignment_0_1");
					put(grammarAccess.getNonEmptyListAccess().getAtomAssignment_1_1_0(), "rule__NonEmptyList__AtomAssignment_1_1_0");
					put(grammarAccess.getNonEmptyListAccess().getTermAssignment_1_1_2(), "rule__NonEmptyList__TermAssignment_1_1_2");
					put(grammarAccess.getFolgeAccess().getAtomAssignment_0(), "rule__Folge__AtomAssignment_0");
					put(grammarAccess.getFolgeAccess().getAtomAssignment_1_1(), "rule__Folge__AtomAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CustomPrologGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CustomPrologGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
