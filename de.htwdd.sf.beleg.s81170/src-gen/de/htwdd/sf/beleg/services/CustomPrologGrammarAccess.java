/*
 * generated by Xtext 2.12.0
 */
package de.htwdd.sf.beleg.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CustomPrologGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.Model");
		private final Assignment cExpressionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionsPrologdslParserRuleCall_0 = (RuleCall)cExpressionsAssignment.eContents().get(0);
		
		//Model:
		//	expressions+=Prologdsl*;
		@Override public ParserRule getRule() { return rule; }
		
		//expressions+=Prologdsl*
		public Assignment getExpressionsAssignment() { return cExpressionsAssignment; }
		
		//Prologdsl
		public RuleCall getExpressionsPrologdslParserRuleCall_0() { return cExpressionsPrologdslParserRuleCall_0; }
	}
	public class PrologdslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.Prologdsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProgramAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProgramProgramParserRuleCall_0_0 = (RuleCall)cProgramAssignment_0.eContents().get(0);
		private final Assignment cExqueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExqueryExqueryParserRuleCall_1_0 = (RuleCall)cExqueryAssignment_1.eContents().get(0);
		
		//Prologdsl:
		//	program=Program exquery=Exquery;
		@Override public ParserRule getRule() { return rule; }
		
		//program=Program exquery=Exquery
		public Group getGroup() { return cGroup; }
		
		//program=Program
		public Assignment getProgramAssignment_0() { return cProgramAssignment_0; }
		
		//Program
		public RuleCall getProgramProgramParserRuleCall_0_0() { return cProgramProgramParserRuleCall_0_0; }
		
		//exquery=Exquery
		public Assignment getExqueryAssignment_1() { return cExqueryAssignment_1; }
		
		//Exquery
		public RuleCall getExqueryExqueryParserRuleCall_1_0() { return cExqueryExqueryParserRuleCall_1_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.Program");
		private final Assignment cClausesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cClausesClauseParserRuleCall_0 = (RuleCall)cClausesAssignment.eContents().get(0);
		
		//Program:
		//	clauses+=Clause+;
		@Override public ParserRule getRule() { return rule; }
		
		//clauses+=Clause+
		public Assignment getClausesAssignment() { return cClausesAssignment; }
		
		//Clause
		public RuleCall getClausesClauseParserRuleCall_0() { return cClausesClauseParserRuleCall_0; }
	}
	public class ExqueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.Exquery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQueryQueryParserRuleCall_1_0 = (RuleCall)cQueryAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Exquery:
		//	'?-' query=Query '.';
		@Override public ParserRule getRule() { return rule; }
		
		//'?-' query=Query '.'
		public Group getGroup() { return cGroup; }
		
		//'?-'
		public Keyword getQuestionMarkHyphenMinusKeyword_0() { return cQuestionMarkHyphenMinusKeyword_0; }
		
		//query=Query
		public Assignment getQueryAssignment_1() { return cQueryAssignment_1; }
		
		//Query
		public RuleCall getQueryQueryParserRuleCall_1_0() { return cQueryQueryParserRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPPredicateParserRuleCall_0_0 = (RuleCall)cPAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPPredicateParserRuleCall_1_1_0 = (RuleCall)cPAssignment_1_1.eContents().get(0);
		
		//Query:
		//	p+=Predicate (',' p+=Predicate)*;
		@Override public ParserRule getRule() { return rule; }
		
		//p+=Predicate (',' p+=Predicate)*
		public Group getGroup() { return cGroup; }
		
		//p+=Predicate
		public Assignment getPAssignment_0() { return cPAssignment_0; }
		
		//Predicate
		public RuleCall getPPredicateParserRuleCall_0_0() { return cPPredicateParserRuleCall_0_0; }
		
		//(',' p+=Predicate)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//p+=Predicate
		public Assignment getPAssignment_1_1() { return cPAssignment_1_1; }
		
		//Predicate
		public RuleCall getPPredicateParserRuleCall_1_1_0() { return cPPredicateParserRuleCall_1_1_0; }
	}
	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.Clause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFactAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFactFactParserRuleCall_0_0 = (RuleCall)cFactAssignment_0.eContents().get(0);
		private final Assignment cRuleAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRuleRuleParserRuleCall_1_0 = (RuleCall)cRuleAssignment_1.eContents().get(0);
		
		//Clause:
		//	=> fact=Fact | rule=Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//=> fact=Fact | rule=Rule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> fact=Fact
		public Assignment getFactAssignment_0() { return cFactAssignment_0; }
		
		//Fact
		public RuleCall getFactFactParserRuleCall_0_0() { return cFactFactParserRuleCall_0_0; }
		
		//rule=Rule
		public Assignment getRuleAssignment_1() { return cRuleAssignment_1; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_1_0() { return cRuleRuleParserRuleCall_1_0; }
	}
	public class FactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.Fact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredicateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredicatePredicateParserRuleCall_0_0 = (RuleCall)cPredicateAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Fact:
		//	predicate=Predicate '.';
		@Override public ParserRule getRule() { return rule; }
		
		//predicate=Predicate '.'
		public Group getGroup() { return cGroup; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_0() { return cPredicateAssignment_0; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_0_0() { return cPredicatePredicateParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRuleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRulePredicateParserRuleCall_0_0 = (RuleCall)cRuleAssignment_0.eContents().get(0);
		private final Keyword cColonHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQueryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQueryQueryParserRuleCall_2_0 = (RuleCall)cQueryAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Rule:
		//	rule=Predicate ':-' query=Query '.';
		@Override public ParserRule getRule() { return rule; }
		
		//rule=Predicate ':-' query=Query '.'
		public Group getGroup() { return cGroup; }
		
		//rule=Predicate
		public Assignment getRuleAssignment_0() { return cRuleAssignment_0; }
		
		//Predicate
		public RuleCall getRulePredicateParserRuleCall_0_0() { return cRulePredicateParserRuleCall_0_0; }
		
		//':-'
		public Keyword getColonHyphenMinusKeyword_1() { return cColonHyphenMinusKeyword_1; }
		
		//query=Query
		public Assignment getQueryAssignment_2() { return cQueryAssignment_2; }
		
		//Query
		public RuleCall getQueryQueryParserRuleCall_2_0() { return cQueryQueryParserRuleCall_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctorFunctorParserRuleCall_0_0 = (RuleCall)cFunctorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTermAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTermTermParserRuleCall_2_0 = (RuleCall)cTermAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTermAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_3_1_0 = (RuleCall)cTermAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Predicate:
		//	functor=Functor '(' term+=Term (',' term+=Term)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//functor=Functor '(' term+=Term (',' term+=Term)* ')'
		public Group getGroup() { return cGroup; }
		
		//functor=Functor
		public Assignment getFunctorAssignment_0() { return cFunctorAssignment_0; }
		
		//Functor
		public RuleCall getFunctorFunctorParserRuleCall_0_0() { return cFunctorFunctorParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//term+=Term
		public Assignment getTermAssignment_2() { return cTermAssignment_2; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_2_0() { return cTermTermParserRuleCall_2_0; }
		
		//(',' term+=Term)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//term+=Term
		public Assignment getTermAssignment_3_1() { return cTermAssignment_3_1; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_3_1_0() { return cTermTermParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FunctorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.Functor");
		private final Assignment cFuncNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFuncNameIDENTTerminalRuleCall_0 = (RuleCall)cFuncNameAssignment.eContents().get(0);
		
		//Functor:
		//	funcName=IDENT;
		@Override public ParserRule getRule() { return rule; }
		
		//funcName=IDENT
		public Assignment getFuncNameAssignment() { return cFuncNameAssignment; }
		
		//IDENT
		public RuleCall getFuncNameIDENTTerminalRuleCall_0() { return cFuncNameIDENTTerminalRuleCall_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAtomAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAtomAtomParserRuleCall_0_0 = (RuleCall)cAtomAssignment_0.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cListListParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		
		//Term:
		//	atom=Atom | list=List;
		@Override public ParserRule getRule() { return rule; }
		
		//atom=Atom | list=List
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//atom=Atom
		public Assignment getAtomAssignment_0() { return cAtomAssignment_0; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_0_0() { return cAtomAtomParserRuleCall_0_0; }
		
		//list=List
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//List
		public RuleCall getListListParserRuleCall_1_0() { return cListListParserRuleCall_1_0; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIdentNUMBERTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		private final Assignment cIdentAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIdentVARIABLETerminalRuleCall_2_0 = (RuleCall)cIdentAssignment_2.eContents().get(0);
		
		//Atom:
		//	ident=IDENT | ident=NUMBER | ident=VARIABLE;
		@Override public ParserRule getRule() { return rule; }
		
		//ident=IDENT | ident=NUMBER | ident=VARIABLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }
		
		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }
		
		//ident=NUMBER
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }
		
		//NUMBER
		public RuleCall getIdentNUMBERTerminalRuleCall_1_0() { return cIdentNUMBERTerminalRuleCall_1_0; }
		
		//ident=VARIABLE
		public Assignment getIdentAssignment_2() { return cIdentAssignment_2; }
		
		//VARIABLE
		public RuleCall getIdentVARIABLETerminalRuleCall_2_0() { return cIdentVARIABLETerminalRuleCall_2_0; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.List");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cListAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNonemptyAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNonemptyNonEmptyListParserRuleCall_1_0 = (RuleCall)cNonemptyAssignment_1.eContents().get(0);
		
		//List:
		//	{List} '[]' | nonempty=NonEmptyList;
		@Override public ParserRule getRule() { return rule; }
		
		//{List} '[]' | nonempty=NonEmptyList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{List} '[]'
		public Group getGroup_0() { return cGroup_0; }
		
		//{List}
		public Action getListAction_0_0() { return cListAction_0_0; }
		
		//'[]'
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_0_1() { return cLeftSquareBracketRightSquareBracketKeyword_0_1; }
		
		//nonempty=NonEmptyList
		public Assignment getNonemptyAssignment_1() { return cNonemptyAssignment_1; }
		
		//NonEmptyList
		public RuleCall getNonemptyNonEmptyListParserRuleCall_1_0() { return cNonemptyNonEmptyListParserRuleCall_1_0; }
	}
	public class NonEmptyListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.NonEmptyList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFolgeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFolgeFolgeParserRuleCall_0_1_0 = (RuleCall)cFolgeAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cAtomAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cAtomAtomParserRuleCall_1_1_0_0 = (RuleCall)cAtomAssignment_1_1_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cTermAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cTermTermParserRuleCall_1_1_2_0 = (RuleCall)cTermAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//NonEmptyList:
		//	'[' folge=Folge ']' | '[' (atom=Atom '|' term=Term) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' folge=Folge ']' | '[' (atom=Atom '|' term=Term) ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' folge=Folge ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//folge=Folge
		public Assignment getFolgeAssignment_0_1() { return cFolgeAssignment_0_1; }
		
		//Folge
		public RuleCall getFolgeFolgeParserRuleCall_0_1_0() { return cFolgeFolgeParserRuleCall_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//'[' (atom=Atom '|' term=Term) ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//atom=Atom '|' term=Term
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//atom=Atom
		public Assignment getAtomAssignment_1_1_0() { return cAtomAssignment_1_1_0; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_1_1_0_0() { return cAtomAtomParserRuleCall_1_1_0_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_1_1() { return cVerticalLineKeyword_1_1_1; }
		
		//term=Term
		public Assignment getTermAssignment_1_1_2() { return cTermAssignment_1_1_2; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_1_1_2_0() { return cTermTermParserRuleCall_1_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class FolgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.Folge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtomAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAtomAtomParserRuleCall_0_0 = (RuleCall)cAtomAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAtomAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAtomAtomParserRuleCall_1_1_0 = (RuleCall)cAtomAssignment_1_1.eContents().get(0);
		
		//Folge:
		//	atom+=Atom (',' atom+=Atom)*;
		@Override public ParserRule getRule() { return rule; }
		
		//atom+=Atom (',' atom+=Atom)*
		public Group getGroup() { return cGroup; }
		
		//atom+=Atom
		public Assignment getAtomAssignment_0() { return cAtomAssignment_0; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_0_0() { return cAtomAtomParserRuleCall_0_0; }
		
		//(',' atom+=Atom)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//atom+=Atom
		public Assignment getAtomAssignment_1_1() { return cAtomAssignment_1_1; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_1_1_0() { return cAtomAtomParserRuleCall_1_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final PrologdslElements pPrologdsl;
	private final ProgramElements pProgram;
	private final ExqueryElements pExquery;
	private final QueryElements pQuery;
	private final ClauseElements pClause;
	private final FactElements pFact;
	private final RuleElements pRule;
	private final PredicateElements pPredicate;
	private final FunctorElements pFunctor;
	private final TermElements pTerm;
	private final AtomElements pAtom;
	private final ListElements pList;
	private final NonEmptyListElements pNonEmptyList;
	private final FolgeElements pFolge;
	private final TerminalRule tIDENT;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tNUMBER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CustomPrologGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPrologdsl = new PrologdslElements();
		this.pProgram = new ProgramElements();
		this.pExquery = new ExqueryElements();
		this.pQuery = new QueryElements();
		this.pClause = new ClauseElements();
		this.pFact = new FactElements();
		this.pRule = new RuleElements();
		this.pPredicate = new PredicateElements();
		this.pFunctor = new FunctorElements();
		this.pTerm = new TermElements();
		this.pAtom = new AtomElements();
		this.pList = new ListElements();
		this.pNonEmptyList = new NonEmptyListElements();
		this.pFolge = new FolgeElements();
		this.tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.IDENT");
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.VARIABLE");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.CustomProlog.NUMBER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.htwdd.sf.beleg.CustomProlog".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	expressions+=Prologdsl*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Prologdsl:
	//	program=Program exquery=Exquery;
	public PrologdslElements getPrologdslAccess() {
		return pPrologdsl;
	}
	
	public ParserRule getPrologdslRule() {
		return getPrologdslAccess().getRule();
	}
	
	//Program:
	//	clauses+=Clause+;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Exquery:
	//	'?-' query=Query '.';
	public ExqueryElements getExqueryAccess() {
		return pExquery;
	}
	
	public ParserRule getExqueryRule() {
		return getExqueryAccess().getRule();
	}
	
	//Query:
	//	p+=Predicate (',' p+=Predicate)*;
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//Clause:
	//	=> fact=Fact | rule=Rule;
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}
	
	//Fact:
	//	predicate=Predicate '.';
	public FactElements getFactAccess() {
		return pFact;
	}
	
	public ParserRule getFactRule() {
		return getFactAccess().getRule();
	}
	
	//Rule:
	//	rule=Predicate ':-' query=Query '.';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Predicate:
	//	functor=Functor '(' term+=Term (',' term+=Term)* ')';
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//Functor:
	//	funcName=IDENT;
	public FunctorElements getFunctorAccess() {
		return pFunctor;
	}
	
	public ParserRule getFunctorRule() {
		return getFunctorAccess().getRule();
	}
	
	//Term:
	//	atom=Atom | list=List;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Atom:
	//	ident=IDENT | ident=NUMBER | ident=VARIABLE;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//List:
	//	{List} '[]' | nonempty=NonEmptyList;
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//NonEmptyList:
	//	'[' folge=Folge ']' | '[' (atom=Atom '|' term=Term) ']';
	public NonEmptyListElements getNonEmptyListAccess() {
		return pNonEmptyList;
	}
	
	public ParserRule getNonEmptyListRule() {
		return getNonEmptyListAccess().getRule();
	}
	
	//Folge:
	//	atom+=Atom (',' atom+=Atom)*;
	public FolgeElements getFolgeAccess() {
		return pFolge;
	}
	
	public ParserRule getFolgeRule() {
		return getFolgeAccess().getRule();
	}
	
	//terminal IDENT:
	//	'a'..'z' ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDENTRule() {
		return tIDENT;
	}
	
	//terminal VARIABLE:
	//	'A'..'Z';
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal NUMBER:
	//	INT;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
