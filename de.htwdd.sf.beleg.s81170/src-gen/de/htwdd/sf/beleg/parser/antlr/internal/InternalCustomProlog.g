/*
 * generated by Xtext 2.12.0
 */
grammar InternalCustomProlog;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.htwdd.sf.beleg.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.htwdd.sf.beleg.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.htwdd.sf.beleg.services.CustomPrologGrammarAccess;

}

@parser::members {

 	private CustomPrologGrammarAccess grammarAccess;

    public InternalCustomPrologParser(TokenStream input, CustomPrologGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected CustomPrologGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getExpressionsPrologdslParserRuleCall_0());
			}
			lv_expressions_0_0=rulePrologdsl
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"expressions",
					lv_expressions_0_0,
					"de.htwdd.sf.beleg.CustomProlog.Prologdsl");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRulePrologdsl
entryRulePrologdsl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrologdslRule()); }
	iv_rulePrologdsl=rulePrologdsl
	{ $current=$iv_rulePrologdsl.current; }
	EOF;

// Rule Prologdsl
rulePrologdsl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrologdslAccess().getProgramProgramParserRuleCall_0_0());
				}
				lv_program_0_0=ruleProgram
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrologdslRule());
					}
					set(
						$current,
						"program",
						lv_program_0_0,
						"de.htwdd.sf.beleg.CustomProlog.Program");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrologdslAccess().getExqueryExqueryParserRuleCall_1_0());
				}
				lv_exquery_1_0=ruleExquery
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrologdslRule());
					}
					set(
						$current,
						"exquery",
						lv_exquery_1_0,
						"de.htwdd.sf.beleg.CustomProlog.Exquery");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getClausesClauseParserRuleCall_0());
			}
			lv_clauses_0_0=ruleClause
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				add(
					$current,
					"clauses",
					lv_clauses_0_0,
					"de.htwdd.sf.beleg.CustomProlog.Clause");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleExquery
entryRuleExquery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExqueryRule()); }
	iv_ruleExquery=ruleExquery
	{ $current=$iv_ruleExquery.current; }
	EOF;

// Rule Exquery
ruleExquery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='?-'
		{
			newLeafNode(otherlv_0, grammarAccess.getExqueryAccess().getQuestionMarkHyphenMinusKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExqueryAccess().getQueryQueryParserRuleCall_1_0());
				}
				lv_query_1_0=ruleQuery
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExqueryRule());
					}
					set(
						$current,
						"query",
						lv_query_1_0,
						"de.htwdd.sf.beleg.CustomProlog.Query");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getExqueryAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	iv_ruleQuery=ruleQuery
	{ $current=$iv_ruleQuery.current; }
	EOF;

// Rule Query
ruleQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getPPredicateParserRuleCall_0_0());
				}
				lv_p_0_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					add(
						$current,
						"p",
						lv_p_0_0,
						"de.htwdd.sf.beleg.CustomProlog.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getQueryAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQueryAccess().getPPredicateParserRuleCall_1_1_0());
					}
					lv_p_2_0=rulePredicate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQueryRule());
						}
						add(
							$current,
							"p",
							lv_p_2_0,
							"de.htwdd.sf.beleg.CustomProlog.Predicate");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleClause
entryRuleClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClauseRule()); }
	iv_ruleClause=ruleClause
	{ $current=$iv_ruleClause.current; }
	EOF;

// Rule Clause
ruleClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				ruleFact
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getClauseAccess().getFactFactParserRuleCall_0_0());
				}
				lv_fact_0_0=ruleFact
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClauseRule());
					}
					set(
						$current,
						"fact",
						lv_fact_0_0,
						"de.htwdd.sf.beleg.CustomProlog.Fact");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getClauseAccess().getRuleRuleParserRuleCall_1_0());
				}
				lv_rule_1_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClauseRule());
					}
					set(
						$current,
						"rule",
						lv_rule_1_0,
						"de.htwdd.sf.beleg.CustomProlog.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFact
entryRuleFact returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactRule()); }
	iv_ruleFact=ruleFact
	{ $current=$iv_ruleFact.current; }
	EOF;

// Rule Fact
ruleFact returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFactAccess().getPredicatePredicateParserRuleCall_0_0());
				}
				lv_predicate_0_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_0_0,
						"de.htwdd.sf.beleg.CustomProlog.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getFactAccess().getFullStopKeyword_1());
		}
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getRulePredicateParserRuleCall_0_0());
				}
				lv_rule_0_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"rule",
						lv_rule_0_0,
						"de.htwdd.sf.beleg.CustomProlog.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':-'
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getColonHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getQueryQueryParserRuleCall_2_0());
				}
				lv_query_2_0=ruleQuery
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"query",
						lv_query_2_0,
						"de.htwdd.sf.beleg.CustomProlog.Query");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getFullStopKeyword_3());
		}
	)
;

// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	iv_rulePredicate=rulePredicate
	{ $current=$iv_rulePredicate.current; }
	EOF;

// Rule Predicate
rulePredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateAccess().getFunctorFunctorParserRuleCall_0_0());
				}
				lv_functor_0_0=ruleFunctor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateRule());
					}
					set(
						$current,
						"functor",
						lv_functor_0_0,
						"de.htwdd.sf.beleg.CustomProlog.Functor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPredicateAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateAccess().getTermTermParserRuleCall_2_0());
				}
				lv_term_2_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateRule());
					}
					add(
						$current,
						"term",
						lv_term_2_0,
						"de.htwdd.sf.beleg.CustomProlog.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getPredicateAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateAccess().getTermTermParserRuleCall_3_1_0());
					}
					lv_term_4_0=ruleTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateRule());
						}
						add(
							$current,
							"term",
							lv_term_4_0,
							"de.htwdd.sf.beleg.CustomProlog.Term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getPredicateAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleFunctor
entryRuleFunctor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctorRule()); }
	iv_ruleFunctor=ruleFunctor
	{ $current=$iv_ruleFunctor.current; }
	EOF;

// Rule Functor
ruleFunctor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_funcName_0_0=RULE_IDENT
			{
				newLeafNode(lv_funcName_0_0, grammarAccess.getFunctorAccess().getFuncNameIDENTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFunctorRule());
				}
				setWithLastConsumed(
					$current,
					"funcName",
					lv_funcName_0_0,
					"de.htwdd.sf.beleg.CustomProlog.IDENT");
			}
		)
	)
;

// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current; }
	EOF;

// Rule Term
ruleTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getAtomAtomParserRuleCall_0_0());
				}
				lv_atom_0_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermRule());
					}
					set(
						$current,
						"atom",
						lv_atom_0_0,
						"de.htwdd.sf.beleg.CustomProlog.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getListListParserRuleCall_1_0());
				}
				lv_list_1_0=ruleList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermRule());
					}
					set(
						$current,
						"list",
						lv_list_1_0,
						"de.htwdd.sf.beleg.CustomProlog.List");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	iv_ruleAtom=ruleAtom
	{ $current=$iv_ruleAtom.current; }
	EOF;

// Rule Atom
ruleAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_ident_0_0=RULE_IDENT
				{
					newLeafNode(lv_ident_0_0, grammarAccess.getAtomAccess().getIdentIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomRule());
					}
					setWithLastConsumed(
						$current,
						"ident",
						lv_ident_0_0,
						"de.htwdd.sf.beleg.CustomProlog.IDENT");
				}
			)
		)
		    |
		(
			(
				lv_ident_1_0=RULE_NUMBER
				{
					newLeafNode(lv_ident_1_0, grammarAccess.getAtomAccess().getIdentNUMBERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomRule());
					}
					setWithLastConsumed(
						$current,
						"ident",
						lv_ident_1_0,
						"de.htwdd.sf.beleg.CustomProlog.NUMBER");
				}
			)
		)
		    |
		(
			(
				lv_ident_2_0=RULE_VARIABLE
				{
					newLeafNode(lv_ident_2_0, grammarAccess.getAtomAccess().getIdentVARIABLETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomRule());
					}
					setWithLastConsumed(
						$current,
						"ident",
						lv_ident_2_0,
						"de.htwdd.sf.beleg.CustomProlog.VARIABLE");
				}
			)
		)
	)
;

// Entry rule entryRuleList
entryRuleList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListRule()); }
	iv_ruleList=ruleList
	{ $current=$iv_ruleList.current; }
	EOF;

// Rule List
ruleList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getListAccess().getListAction_0_0(),
						$current);
				}
			)
			otherlv_1='[]'
			{
				newLeafNode(otherlv_1, grammarAccess.getListAccess().getLeftSquareBracketRightSquareBracketKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getListAccess().getNonemptyNonEmptyListParserRuleCall_1_0());
				}
				lv_nonempty_2_0=ruleNonEmptyList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListRule());
					}
					set(
						$current,
						"nonempty",
						lv_nonempty_2_0,
						"de.htwdd.sf.beleg.CustomProlog.NonEmptyList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNonEmptyList
entryRuleNonEmptyList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNonEmptyListRule()); }
	iv_ruleNonEmptyList=ruleNonEmptyList
	{ $current=$iv_ruleNonEmptyList.current; }
	EOF;

// Rule NonEmptyList
ruleNonEmptyList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='['
			{
				newLeafNode(otherlv_0, grammarAccess.getNonEmptyListAccess().getLeftSquareBracketKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNonEmptyListAccess().getFolgeFolgeParserRuleCall_0_1_0());
					}
					lv_folge_1_0=ruleFolge
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNonEmptyListRule());
						}
						set(
							$current,
							"folge",
							lv_folge_1_0,
							"de.htwdd.sf.beleg.CustomProlog.Folge");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=']'
			{
				newLeafNode(otherlv_2, grammarAccess.getNonEmptyListAccess().getRightSquareBracketKeyword_0_2());
			}
		)
		    |
		(
			otherlv_3='['
			{
				newLeafNode(otherlv_3, grammarAccess.getNonEmptyListAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getNonEmptyListAccess().getAtomAtomParserRuleCall_1_1_0_0());
						}
						lv_atom_4_0=ruleAtom
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNonEmptyListRule());
							}
							set(
								$current,
								"atom",
								lv_atom_4_0,
								"de.htwdd.sf.beleg.CustomProlog.Atom");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_5='|'
				{
					newLeafNode(otherlv_5, grammarAccess.getNonEmptyListAccess().getVerticalLineKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNonEmptyListAccess().getTermTermParserRuleCall_1_1_2_0());
						}
						lv_term_6_0=ruleTerm
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNonEmptyListRule());
							}
							set(
								$current,
								"term",
								lv_term_6_0,
								"de.htwdd.sf.beleg.CustomProlog.Term");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_7=']'
			{
				newLeafNode(otherlv_7, grammarAccess.getNonEmptyListAccess().getRightSquareBracketKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleFolge
entryRuleFolge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFolgeRule()); }
	iv_ruleFolge=ruleFolge
	{ $current=$iv_ruleFolge.current; }
	EOF;

// Rule Folge
ruleFolge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFolgeAccess().getAtomAtomParserRuleCall_0_0());
				}
				lv_atom_0_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFolgeRule());
					}
					add(
						$current,
						"atom",
						lv_atom_0_0,
						"de.htwdd.sf.beleg.CustomProlog.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getFolgeAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFolgeAccess().getAtomAtomParserRuleCall_1_1_0());
					}
					lv_atom_2_0=ruleAtom
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFolgeRule());
						}
						add(
							$current,
							"atom",
							lv_atom_2_0,
							"de.htwdd.sf.beleg.CustomProlog.Atom");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

RULE_IDENT : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_VARIABLE : 'A'..'Z';

RULE_NUMBER : RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
