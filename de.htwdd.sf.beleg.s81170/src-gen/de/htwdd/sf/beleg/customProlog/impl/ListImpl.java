/**
 * generated by Xtext 2.12.0
 */
package de.htwdd.sf.beleg.customProlog.impl;

import de.htwdd.sf.beleg.customProlog.CustomPrologPackage;
import de.htwdd.sf.beleg.customProlog.List;
import de.htwdd.sf.beleg.customProlog.NonEmptyList;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>List</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.htwdd.sf.beleg.customProlog.impl.ListImpl#getNonempty <em>Nonempty</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ListImpl extends MinimalEObjectImpl.Container implements List
{
  /**
   * The cached value of the '{@link #getNonempty() <em>Nonempty</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNonempty()
   * @generated
   * @ordered
   */
  protected NonEmptyList nonempty;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ListImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CustomPrologPackage.Literals.LIST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NonEmptyList getNonempty()
  {
    return nonempty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNonempty(NonEmptyList newNonempty, NotificationChain msgs)
  {
    NonEmptyList oldNonempty = nonempty;
    nonempty = newNonempty;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CustomPrologPackage.LIST__NONEMPTY, oldNonempty, newNonempty);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNonempty(NonEmptyList newNonempty)
  {
    if (newNonempty != nonempty)
    {
      NotificationChain msgs = null;
      if (nonempty != null)
        msgs = ((InternalEObject)nonempty).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CustomPrologPackage.LIST__NONEMPTY, null, msgs);
      if (newNonempty != null)
        msgs = ((InternalEObject)newNonempty).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CustomPrologPackage.LIST__NONEMPTY, null, msgs);
      msgs = basicSetNonempty(newNonempty, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CustomPrologPackage.LIST__NONEMPTY, newNonempty, newNonempty));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CustomPrologPackage.LIST__NONEMPTY:
        return basicSetNonempty(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CustomPrologPackage.LIST__NONEMPTY:
        return getNonempty();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CustomPrologPackage.LIST__NONEMPTY:
        setNonempty((NonEmptyList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CustomPrologPackage.LIST__NONEMPTY:
        setNonempty((NonEmptyList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CustomPrologPackage.LIST__NONEMPTY:
        return nonempty != null;
    }
    return super.eIsSet(featureID);
  }

} //ListImpl
