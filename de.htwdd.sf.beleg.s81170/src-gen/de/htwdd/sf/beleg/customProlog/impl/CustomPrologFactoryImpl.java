/**
 * generated by Xtext 2.12.0
 */
package de.htwdd.sf.beleg.customProlog.impl;

import de.htwdd.sf.beleg.customProlog.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CustomPrologFactoryImpl extends EFactoryImpl implements CustomPrologFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CustomPrologFactory init()
  {
    try
    {
      CustomPrologFactory theCustomPrologFactory = (CustomPrologFactory)EPackage.Registry.INSTANCE.getEFactory(CustomPrologPackage.eNS_URI);
      if (theCustomPrologFactory != null)
      {
        return theCustomPrologFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CustomPrologFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CustomPrologFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CustomPrologPackage.MODEL: return createModel();
      case CustomPrologPackage.PROLOGDSL: return createPrologdsl();
      case CustomPrologPackage.PROGRAM: return createProgram();
      case CustomPrologPackage.EXQUERY: return createExquery();
      case CustomPrologPackage.QUERY: return createQuery();
      case CustomPrologPackage.CLAUSE: return createClause();
      case CustomPrologPackage.FACT: return createFact();
      case CustomPrologPackage.RULE: return createRule();
      case CustomPrologPackage.PREDICATE: return createPredicate();
      case CustomPrologPackage.FUNCTOR: return createFunctor();
      case CustomPrologPackage.TERM: return createTerm();
      case CustomPrologPackage.ATOM: return createAtom();
      case CustomPrologPackage.LIST: return createList();
      case CustomPrologPackage.NON_EMPTY_LIST: return createNonEmptyList();
      case CustomPrologPackage.FOLGE: return createFolge();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Prologdsl createPrologdsl()
  {
    PrologdslImpl prologdsl = new PrologdslImpl();
    return prologdsl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Exquery createExquery()
  {
    ExqueryImpl exquery = new ExqueryImpl();
    return exquery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Query createQuery()
  {
    QueryImpl query = new QueryImpl();
    return query;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Clause createClause()
  {
    ClauseImpl clause = new ClauseImpl();
    return clause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fact createFact()
  {
    FactImpl fact = new FactImpl();
    return fact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Predicate createPredicate()
  {
    PredicateImpl predicate = new PredicateImpl();
    return predicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Functor createFunctor()
  {
    FunctorImpl functor = new FunctorImpl();
    return functor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Term createTerm()
  {
    TermImpl term = new TermImpl();
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Atom createAtom()
  {
    AtomImpl atom = new AtomImpl();
    return atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public List createList()
  {
    ListImpl list = new ListImpl();
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NonEmptyList createNonEmptyList()
  {
    NonEmptyListImpl nonEmptyList = new NonEmptyListImpl();
    return nonEmptyList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Folge createFolge()
  {
    FolgeImpl folge = new FolgeImpl();
    return folge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CustomPrologPackage getCustomPrologPackage()
  {
    return (CustomPrologPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CustomPrologPackage getPackage()
  {
    return CustomPrologPackage.eINSTANCE;
  }

} //CustomPrologFactoryImpl
