(define f (lambda(n)
   (if (= n 0) 0 (+ (f (- n 1)) 2))))
f
(f 4)
(define abc)
abc
#t
#f
(pair? (quote(a b)))
(pair? (quote a))
(pair? #t)
(pair? 3)
(caar (quote(((a b)))))
(cadr (quote(d((a b)c))))
(cddr (quote(d((a b)c) e)))
(cdar (quote((d)((a b)c)e)))
(cdar (quote((a b))))
(zero? 0)
(zero? (- 2 2))
(zero? 3)
(zero? (quote(1 2 3)))
(symbol? (quote a))
(symbol? #t)
(not #t)
(not #f)
(not(not #t))
(not 3)
(not(list 3))
(not(quote ()))
(not (quote nil))
(let ((x 1))(+ 1 x))
(cond((= 1 2)(+ 1 2))
     (else (+ 10 1)))
; das ist ein Comment
(eq? (quote a)(quote a))
(eq? (quote (a b c))(quote (a b c)))
(eq? 3 3)
(eq? 3 4)
(eq? car car)
(eq? car cdr)
(eq? #t #t)
(eq? #t #f)
(+ 1 2)
(- 5 3 1)
(eq? "abc" "abc")
(cons "abcd" '(x y))
(eq? (quote a) (quote b))
(equal? (quote a) (quote b))
(equal? (quote (a b c))(quote (a b c)))
(equal? car car)
(equal? "a bc!" "a bc!")
(equal? "abc" "cba")
(define y 'w)
y
(define li '(a b c))
li
(define st "das ist ein string")
st
(cadadr '(a (b (c d))))
(caadr '(a (b (c d))))
(define $fib$ (lambda (i a1 a2)
               (if (= i 0) 0 (if (= i 1) a1
                                 ($fib$ (- i 1)(+ a1 a2) a1)))))
($fib$ 5 1 0)
($fib$ 6 1 0)
($fib$ 7 1 0)
($fib$ 8 1 0)
(cond((= 1 2)(+ 1 2))
     (else (+ 10 1)))
(+ 1 (cond((= 10 2) (+ 10 10)(+ 1 2))
     ((> 2  2) 11)
     ((> 3  2) 12)
     ((= 4  2) 13)
      (else 14)))
(letrec ((k (lambda (x)(+ x 2))))(k 5))
((lambda (g h ) ((lambda ($g$ $h$ ) (set! g $g$ ) (set! h $h$ ) (g 7 ) ) (lambda(x)(+(h x) 1)) (lambda(y)(+ y 3)) ) ) #t #t )

(letrec ((g (lambda (x)(+ (h x) 1)))
         (h (lambda (y)(+ y 3) ))) (g 7))
]